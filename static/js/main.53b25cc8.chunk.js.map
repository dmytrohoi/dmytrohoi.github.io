{"version":3,"sources":["components/home/HomeTabs.js","components/common/Logo.js","components/settings.js","components/common/Footer.js","components/home/App.js","serviceWorker.js","index.js","components/common/Spinner.js"],"names":["About","lazy","Projects","Articles","tabs","uri","label","TabLink","match","useRouteMatch","path","replace","exact","Tab","style","color","height","key","is","href","id","isSelected","Boolean","HomeTabs","hashType","Pane","TabNavigation","marginTop","marginBottom","flexBasis","marginRight","map","tab","padding","background","flex","fallback","Spinner","from","to","Logo","width","type","srcset","src","alt","Footer","className","Text","Date","getFullYear","App","elevation","paddingBottom","window","location","hostname","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","CustomSpinner","display","alignItems","justifyContent"],"mappings":"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","file":"static/js/main.53b25cc8.chunk.js","sourcesContent":["import React, { lazy, Suspense } from \"react\";\nimport { Pane, Tab, TabNavigation } from 'evergreen-ui';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  useRouteMatch, Redirect\n} from \"react-router-dom\";\n\n// Custom components\n\nimport Spinner from '../common/Spinner';\n\nconst About = lazy(() => import('../about/About'));\nconst Projects = lazy(() => import('../projects/Projects'));\nconst Articles = lazy(() => import('../articles/Articles'));\n\nconst tabs = [\n  { uri: '#', label: 'About' },\n  { uri: '#projects', label: 'Projects' },\n  { uri: '#articles', label: 'Articles' }\n]\n\nfunction TabLink({ uri, label }) {\n  let match = useRouteMatch({\n    path: uri.replace('#', '/'),\n    exact: true\n  });\n\n  return (\n      <Tab\n        style={{color: \"white\"}} height=\"2em\" key={label} is=\"a\"\n        href={uri} id={label} isSelected={Boolean(match)}\n      >\n        {label}\n      </Tab>\n    )\n}\n\nconst HomeTabs = () => {\n  return (\n    <Router hashType=\"noslash\">\n      <Pane>\n        <TabNavigation marginTop={24} marginBottom={16} flexBasis={240} marginRight={24}>\n          {tabs.map(tab => <TabLink key={tab.label} {...tab} />)}\n        </TabNavigation>\n        <Pane padding={16} background=\"tint1\" flex=\"1\">\n          <Switch>\n            <Route exact path=\"/\">\n              <Suspense fallback={<Spinner />}>\n                <About />\n              </Suspense>\n            </Route>\n            <Route exact path=\"/projects\">\n              <Suspense fallback={<Spinner />}>\n                <Projects />\n              </Suspense>\n            </Route>\n            <Route exact path=\"/articles\">\n              <Suspense fallback={<Spinner />}>\n                <Articles />\n              </Suspense>\n            </Route>\n            <Redirect from=\"*\" to=\"/\" />\n          </Switch>\n        </Pane>\n      </Pane>\n    </Router>\n  )\n}\n\nexport default HomeTabs","import React from 'react';\r\n\r\nimport {siteName} from '../settings';\r\n\r\n\r\nconst logosPath = '/img/logo';\r\n\r\nconst Logo = ({width = 160, height = 160}) => (\r\n    <picture >\r\n        <source type=\"image/webp\" srcset={`${logosPath}.webp`}  width={width} height={height} />\r\n        <source type=\"image/png\" srcset={`${logosPath}.png`}  width={width} height={height} />\r\n        <img src={`${logosPath}.png`} alt={`${siteName} Logo`} width={width} height={height}/>\r\n    </picture>\r\n)\r\n\r\nexport default Logo;\r\n","export const siteName = 'Dmytro Hoi';\r\n\r\n\r\n","import React from 'react';\r\nimport { Pane, Text } from 'evergreen-ui';\r\n\r\nimport {siteName} from '../settings';\r\n\r\n\r\nconst Footer = () => (\r\n    <Pane className=\"footer\">\r\n        <Text color=\"white\">Â© {siteName}, {(new Date()).getFullYear()}</Text>\r\n    </Pane>\r\n)\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport { Pane } from 'evergreen-ui';\n\n// Stylesheets\nimport './App.css';\n\n// Custom components\nimport HomeTabs from './HomeTabs';\nimport Logo from '../common/Logo';\nimport Footer from '../common/Footer';\n\n\nexport default function App () {\n  return (\n    <Pane>\n      <Pane\n        className=\"container\"\n        elevation={1}\n      >\n        <Pane className=\"logo\"><Logo /></Pane>\n        <HomeTabs className=\"main\" />\n        <Pane className=\"footer\" paddingBottom={5}><Footer /></Pane>\n      </Pane>\n    </Pane>\n  )\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\nimport App from './components/home/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nSentry.init({\n  dsn: \"https://5766734cff264b728d7af15e5a0333a6@o485346.ingest.sentry.io/5540573\",\n  integrations: [\n    new Integrations.BrowserTracing(),\n  ],\n\n  // We recommend adjusting this value in production, or using tracesSampler\n  // for finer control\n  tracesSampleRate: 1.0,\n});\n\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\n\nimport { Pane, Spinner } from 'evergreen-ui';\n\nexport default function CustomSpinner () {\n  return (\n    <Pane display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height={400}>\n      <Spinner />\n    </Pane>\n  )\n}"],"sourceRoot":""}